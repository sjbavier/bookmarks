'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _sql = require('sql.js');

var _sql2 = _interopRequireDefault(_sql);

var _ini = require('ini');

var _ini2 = _interopRequireDefault(_ini);

var _browserPlugin = require('./browser-plugin');

var _browserPlugin2 = _interopRequireDefault(_browserPlugin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Determine Firefox config location
let dir;
if (_os2.default.type() === 'Darwin') {
  dir = `${ _os2.default.homedir() }/Library/Application Support/Firefox`;
} else if (_os2.default.type() === 'Windows_NT') {
  dir = _path2.default.join(_os2.default.homedir(), 'AppData', 'Roaming', 'Mozilla', 'Firefox');
} else if (_os2.default.type() === 'Linux') {
  dir = _path2.default.join(_os2.default.homedir(), '.mozilla', 'firefox');
}

const iniName = 'profiles.ini';
const filename = 'places.sqlite';

class FirefoxPlugin extends _browserPlugin2.default {

  /**
   * Retrieves the location of `profileToSearch`
   * @param  {string} profileToSearch Name of profile
   * @return {string}                 local path to profile
   */
  getProfileLocation(profileToSearch) {
    const iniBuffer = _fs2.default.readFileSync(_path2.default.join(dir, iniName), 'utf8');
    const iniObj = _ini2.default.decode(iniBuffer);

    for (let profileId in iniObj) {
      let profile = iniObj[profileId];
      // Check whether this config item is a profile at all
      if (profile['Name'] !== undefined) {
        if (profileToSearch === 'Default' || profileToSearch.toLowerCase() === profile['Name'].toLowerCase()) {
          return _path2.default.join(dir, profile.Path);
        }
      }
    }

    throw new Error(`The profile ${ profileToSearch } could not be found!`);
  }

  getBookmarks(profile) {
    let profilePath = this.getProfileLocation(profile);
    let bookmarks = [];
    const filebuffer = _fs2.default.readFileSync(_path2.default.join(profilePath, filename));
    var db = new _sql2.default.Database(filebuffer);
    db.each(`SELECT moz_bookmarks.title as name, moz_places.url as value
             FROM moz_bookmarks
             INNER JOIN moz_places ON moz_bookmarks.fk = moz_places.id
             WHERE url NOT LIKE "place:%"`, obj => {
      bookmarks.push(obj);
    });
    return bookmarks;
  }

  open(url) {
    if (_os2.default.type() === 'Darwin') {
      _child_process2.default.exec(`open -a "Firefox" "${ url }"`);
    } else if (_os2.default.type() === 'Windows_NT') {
      _child_process2.default.exec(`start firefox "${ url }"`);
    } else if (_os2.default.type() === 'Linux') {
      _child_process2.default.exec(`firefox "${ url }"`);
    }
  }
}

exports.default = FirefoxPlugin;