'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fuse = require('fuse.js');

var _fuse2 = _interopRequireDefault(_fuse);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class BrowserPlugin {
  constructor() {
    this.resultsCount = 0;
    this.matchesCount = 0;

    // Prevent creating BrowserPlugin
    if (new.target === BrowserPlugin) {
      throw new TypeError(`Cannot construct abstract BrowserPlugin directly`);
    }

    // Check whether the derived class contains all abstract methods
    ['search', 'open', 'getBookmarks'].forEach(requiredMethod => {
      if (typeof this[requiredMethod] !== 'function') {
        throw new TypeError(`Must override method ${ requiredMethod }()`);
      }
    });
  }

  search(searchTerm, profile = 'Default') {
    // Gather bookmarks
    const bookmarks = this.getBookmarks(profile);

    this.resultsCount = bookmarks.length;

    // Just output all bookmarks
    if (searchTerm === undefined) {
      console.log(_chalk2.default.green(`Showing all ${ this.resultsCount } bookmarks`));
      return bookmarks;
    }

    let options = {
      // include: ['score'],
      caseSensitive: false,
      shouldSort: true,
      tokenize: false,
      threshold: 0.3,
      location: 0,
      distance: 100,
      keys: ['name', 'value']
    };

    let fuse = new _fuse2.default(bookmarks, options);

    let filteredBookmarks = fuse.search(searchTerm);
    this.matchesCount = filteredBookmarks.length;

    if (filteredBookmarks.length === 0) {
      console.log(_chalk2.default.green(`Searched through ${ this.resultsCount } bookmarks`));
      throw new Error(`None matched "${ searchTerm }"`);
    }

    console.log(_chalk2.default.green(`Found ${ this.matchesCount } matches in ${ this.resultsCount } bookmarks`));
    return filteredBookmarks;
  }

}

exports.default = BrowserPlugin;