'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _browserPlugin = require('./browser-plugin');

var _browserPlugin2 = _interopRequireDefault(_browserPlugin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ChromePlugin extends _browserPlugin2.default {

  /**
   * Determines the location of the file containing the bookmarks
   * @param  {string} profile name of profiel
   * @return {string}         path to Bookmarks file
   */
  static getBookmarkLocation(profile) {
    // Determine Chrome config location
    if (_os2.default.type() === 'Darwin') {
      return `${ _os2.default.homedir() }/Library/Application Support/Google/Chrome/${ profile }/Bookmarks`;
    } else if (_os2.default.type() === 'Windows_NT') {
      return _path2.default.join(_os2.default.homedir(), 'AppData', 'Local', 'Google', 'Chrome', 'User Data', profile, 'Bookmarks');
    } else if (_os2.default.type() === 'Linux') {
      return _path2.default.join(_os2.default.homedir(), '.config', 'google-chrome', profile, 'Bookmarks');
    }
  }

  getBookmarks(profile) {
    // Yes we can use synchronous code here because the file needs to be loaded before something will happen anyways
    let data;
    try {
      data = _fs2.default.readFileSync(ChromePlugin.getBookmarkLocation(profile), 'utf8');
    } catch (err) {
      throw new Error(`There is no profile '${ profile }'`);
    }
    const obj = JSON.parse(data);

    let it;
    let res;
    let bookmarkItems = [];

    // Traverse all roots keys
    for (let key in obj.roots) {
      it = traverseTree(obj.roots[key]);

      res = it.next();
      while (!res.done) {
        if (res.value.type === 'url') {
          bookmarkItems.push({
            name: res.value.name,
            value: res.value.url
          });
        }
        res = it.next();
      }
    }
    return bookmarkItems;
  }

  open(url) {
    if (_os2.default.type() === 'Darwin') {
      _child_process2.default.exec(`open -a "Google Chrome" "${ url }"`);
    } else if (_os2.default.type() === 'Windows_NT') {
      _child_process2.default.exec(`start chrome "${ url }"`);
    } else if (_os2.default.type() === 'Linux') {
      _child_process2.default.exec(`chrome "${ url }"`);
    }
  }
}

function* traverseTree(data) {
  if (!data) {
    return;
  }

  if (data.children) {
    yield* traverseTree(data.children);
  }

  for (var i = 0; i < data.length; i++) {
    var val = data[i];
    yield val;

    if (val.children) {
      yield* traverseTree(val.children);
    }
  }
}

exports.default = ChromePlugin;